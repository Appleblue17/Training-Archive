1:"$Sreact.fragment"
2:I[8521,[],""]
3:I[1661,[],""]
b:I[939,[],""]
:HL["/Training-Archive/_next/static/media/cc27cf3ff100ea21-s.p.ttf","font",{"crossOrigin":"","type":"font/ttf"}]
:HL["/Training-Archive/_next/static/css/dd3bbe79ef28f60a.css","style"]
:HL["/Training-Archive/_next/static/css/9f4210e542df69af.css","style"]
0:{"P":null,"b":"a30EFPdaQXL6dyuEM1irn","p":"/Training-Archive","c":["","view","contests","2024-12-13%20The%202021%20ICPC%20Asia%20East%20Continent%20Final%20Contest%20(EC-Final%202021)","problems","F","solution_wxq.md"],"i":false,"f":[[["",{"children":["view",{"children":["contests",{"children":[["contest","2024-12-13%20The%202021%20ICPC%20Asia%20East%20Continent%20Final%20Contest%20(EC-Final%202021)","d"],{"children":["problems",{"children":[["problem","F","d"],{"children":[["file","solution_wxq.md","d"],{"children":["__PAGE__",{}]}]}]}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/Training-Archive/_next/static/css/dd3bbe79ef28f60a.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","meta",null,{"charSet":"UTF-8"}],["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link",null,{"rel":"icon","type":"image/png","href":"https://appleblue17.github.io/Training-Archive/archive-bot.png"}],["$","title",null,{"children":"Training Archive"}]]}],["$","body",null,{"className":"__className_e3f162 antialiased","children":[["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","footer",null,{"className":"my-4","children":[["$","p",null,{"className":"mt-0 border-t border-gray-700 pt-4 text-center text-sm text-gray-400","children":["© 2025 Training Archive ·"," ",["$","a",null,{"href":"https://github.com/appleblue17/Training-Archive/","target":"_blank","rel":"noopener noreferrer","className":"hover:text-blue-300","children":[["$","svg",null,{"stroke":"currentColor","fill":"none","strokeWidth":"2","viewBox":"0 0 24 24","strokeLinecap":"round","strokeLinejoin":"round","className":"mr-1 inline","children":["$undefined",[["$","path","0",{"d":"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22","children":[]}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}],"GitHub"]}]," ","· MIT License"]}],["$","p",null,{"className":"mt-2 text-center text-sm text-gray-400","children":["Designed and developed by",["$","a",null,{"href":"https://github.com/Appleblue17","target":"_blank","rel":"noopener noreferrer","className":"px-1 text-blue-400 hover:text-blue-300","children":"Appleblue17"}]]}],["$","p",null,{"className":"mt-2 text-center text-xs text-gray-500","children":"Disclaimer: This project is for educational purposes only. Use at your own risk."}]]}]]}]]}]]}],{"children":["view",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["contests",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":"$L4","templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["contest","2024-12-13%20The%202021%20ICPC%20Asia%20East%20Continent%20Final%20Contest%20(EC-Final%202021)","d"],"$L5",{"children":["problems","$L6",{"children":[["problem","F","d"],"$L7",{"children":[["file","solution_wxq.md","d"],"$L8",{"children":["__PAGE__","$L9",{},null,false]},null,false]},null,false]},null,false]},null,false]},null,false]},null,false]},null,false],"$La",false]],"m":"$undefined","G":["$b",[]],"s":false,"S":true}
d:I[7055,[],"OutletBoundary"]
f:I[9909,[],"AsyncMetadataOutlet"]
11:I[7055,[],"ViewportBoundary"]
13:I[7055,[],"MetadataBoundary"]
14:"$Sreact.suspense"
4:["$","$L3",null,{}]
5:["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
6:["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
7:["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
8:["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
9:["$","$1","c",{"children":["$Lc",[["$","link","0",{"rel":"stylesheet","href":"/Training-Archive/_next/static/css/9f4210e542df69af.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$Ld",null,{"children":["$Le",["$","$Lf",null,{"promise":"$@10"}]]}]]}]
a:["$","$1","h",{"children":[null,[["$","$L11",null,{"children":"$L12"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$L13",null,{"children":["$","div",null,{"hidden":true,"children":["$","$14",null,{"fallback":null,"children":"$L15"}]}]}]]}]
c:["$","div",null,{"className":"flex min-h-screen justify-center py-4","children":["$","div",null,{"className":"mx-auto w-4/5","children":[["$","header",null,{"className":"relative w-full rounded-lg py-2 text-slate-300","children":[["$","h1",null,{"className":"text-2xl font-semibold tracking-wide","children":"File Viewer"}],["$","p",null,{"className":"ml-4 mt-2 text-base text-gray-400","children":[["$","span",null,{"className":"px-2 text-lg text-gray-200","children":"/"}],"2024-12-13 The 2021 ICPC Asia East Continent Final Contest (EC-Final 2021)",["$","span",null,{"className":"px-2 text-lg text-slate-300","children":"/"}],"F",["$","span",null,{"className":"px-2 text-lg text-slate-300","children":"/"}],"solution_wxq.md"]}],["$","div",null,{"className":"absolute right-8 top-2 flex items-center gap-2","children":[["$","a",null,{"href":"/Training-Archive/contests/2024-12-13 The 2021 ICPC Asia East Continent Final Contest (EC-Final 2021)/problems/F/solution_wxq.md","download":true,"className":"rounded bg-gray-700 px-3 py-1 text-sm text-white hover:bg-gray-600","children":[["$","svg",null,{"stroke":"currentColor","fill":"none","strokeWidth":"2","viewBox":"0 0 24 24","strokeLinecap":"round","strokeLinejoin":"round","className":"mr-2 inline-block text-base","children":["$undefined",[["$","path","0",{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4","children":[]}],["$","polyline","1",{"points":"7 10 12 15 17 10","children":[]}],["$","line","2",{"x1":"12","y1":"15","x2":"12","y2":"3","children":[]}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}],"Download"]}],["$","a",null,{"href":"/Training-Archive/contests/2024-12-13 The 2021 ICPC Asia East Continent Final Contest (EC-Final 2021)/problems/F/solution_wxq.md","target":"_blank","rel":"noopener noreferrer","className":"rounded bg-gray-700 px-3 py-1 text-sm text-white hover:bg-gray-600","children":[["$","svg",null,{"stroke":"currentColor","fill":"none","strokeWidth":"2","viewBox":"0 0 24 24","strokeLinecap":"round","strokeLinejoin":"round","className":"mr-2 inline-block text-base","children":["$undefined",[["$","path","0",{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z","children":[]}],["$","polyline","1",{"points":"14 2 14 8 20 8","children":[]}],["$","line","2",{"x1":"16","y1":"13","x2":"8","y2":"13","children":[]}],["$","line","3",{"x1":"16","y1":"17","x2":"8","y2":"17","children":[]}],["$","polyline","4",{"points":"10 9 9 9 8 9","children":[]}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}],"Raw File"]}]]}]]}],["$","main",null,{"className":"mt-4 flex w-full items-start justify-center gap-4","children":[["$","div",null,{"className":"flex-grow","children":"$L16"}],["$","div",null,{"className":"flex-shrink-0 basis-1/5 space-y-2 overflow-auto","children":[["$","div",null,{"className":"overflow-auto","children":[["$","h2",null,{"className":"px-1 py-1 text-sm font-medium text-gray-300","children":"File"}],["$","div",null,{"className":"rounded border-2 border-gray-400 bg-black/80 px-2 py-3 font-mono text-sm text-green-300","children":[["$","div","name",{"className":"mb-1 break-all","style":{"textIndent":"-1.2em","paddingLeft":"1.2em"},"children":[["$","span",null,{"className":"text-blue-400","children":["[","Name","]"]}]," ",["$","span",null,{"className":"text-green-200","children":"solution_wxq.md"}]]}],["$","div","size",{"className":"mb-1 break-all","style":{"textIndent":"-1.2em","paddingLeft":"1.2em"},"children":[["$","span",null,{"className":"text-blue-400","children":["[","Size","]"]}]," ",["$","span",null,{"className":"text-yellow-400","children":"6.691 KB (6852 B)"}]]}]]}]]}],["$","div",null,{"className":"overflow-auto","children":[["$","h2",null,{"className":"px-1 py-1 text-sm font-medium text-gray-300","children":"Problem"}],["$","div",null,{"className":"rounded border-2 border-gray-400 bg-black/80 px-2 py-3 font-mono text-sm text-green-300","children":[["$","div","name",{"className":"mb-1 break-all","style":{"textIndent":"-1.2em","paddingLeft":"1.2em"},"children":[["$","span",null,{"className":"text-blue-400","children":["[","Name","]"]}]," ",["$","span",null,{"className":"text-green-200","children":"Vacation"}]]}],["$","div","link",{"className":"mb-1 break-all","style":{"textIndent":"-1.2em","paddingLeft":"1.2em"},"children":[["$","span",null,{"className":"text-blue-400","children":["[","Link","]"]}]," ","$L17"]}],"$L18","$L19","$L1a","$L1b","$L1c"]}]]}],"$L1d"]}]]}]]}]}]
17:["$","a",null,{"href":"https://qoj.ac/contest/1041/problem/5069","target":"_blank","rel":"noopener noreferrer","className":"text-indigo-400 underline hover:text-indigo-200","children":"https://qoj.ac/contest/1041/problem/5069"}]
18:["$","div","time_limit",{"className":"mb-1 break-all","style":{"textIndent":"-1.2em","paddingLeft":"1.2em"},"children":[["$","span",null,{"className":"text-blue-400","children":["[","Time Limit","]"]}]," ",["$","span",null,{"className":"text-yellow-400","children":"4 s"}]]}]
19:["$","div","memory_limit",{"className":"mb-1 break-all","style":{"textIndent":"-1.2em","paddingLeft":"1.2em"},"children":[["$","span",null,{"className":"text-blue-400","children":["[","Memory Limit","]"]}]," ",["$","span",null,{"className":"text-yellow-400","children":"1024 MB"}]]}]
1a:["$","div","solved",{"className":"mb-1 break-all","style":{"textIndent":"-1.2em","paddingLeft":"1.2em"},"children":[["$","span",null,{"className":"text-blue-400","children":["[","Solved","]"]}]," ",["$","span",null,{"className":"text-cyan-400","children":"true"}]]}]
1b:["$","div","submit_time",{"className":"mb-1 break-all","style":{"textIndent":"-1.2em","paddingLeft":"1.2em"},"children":[["$","span",null,{"className":"text-blue-400","children":["[","Submit Time","]"]}]," ",["$","span",null,{"className":"text-pink-400","children":"2025/08/02 14:06:39"}]]}]
1c:["$","div","solve_time",{"className":"mb-1 break-all","style":{"textIndent":"-1.2em","paddingLeft":"1.2em"},"children":[["$","span",null,{"className":"text-blue-400","children":["[","Solve Time","]"]}]," ",["$","span",null,{"className":"text-pink-400","children":"2025/08/02 14:06:39"}]]}]
1d:["$","div",null,{"className":"overflow-auto","children":[["$","h2",null,{"className":"px-1 py-1 text-sm font-medium text-gray-300","children":"Contest"}],["$","div",null,{"className":"rounded border-2 border-gray-400 bg-black/80 px-2 py-3 font-mono text-sm text-green-300","children":[["$","div","name",{"className":"mb-1 break-all","style":{"textIndent":"-1.2em","paddingLeft":"1.2em"},"children":[["$","span",null,{"className":"text-blue-400","children":["[","Name","]"]}]," ",["$","span",null,{"className":"text-green-200","children":"The 2021 ICPC Asia East Continent Final Contest (EC-Final 2021)"}]]}],["$","div","date",{"className":"mb-1 break-all","style":{"textIndent":"-1.2em","paddingLeft":"1.2em"},"children":[["$","span",null,{"className":"text-blue-400","children":["[","Date","]"]}]," ",["$","span",null,{"className":"text-pink-400","children":"2024-12-13"}]]}],["$","div","platform",{"className":"mb-1 break-all","style":{"textIndent":"-1.2em","paddingLeft":"1.2em"},"children":[["$","span",null,{"className":"text-blue-400","children":["[","Platform","]"]}]," ",["$","span",null,{"className":"text-green-200","children":"qoj"}]]}],["$","div","start_time",{"className":"mb-1 break-all","style":{"textIndent":"-1.2em","paddingLeft":"1.2em"},"children":[["$","span",null,{"className":"text-blue-400","children":["[","Start Time","]"]}]," ",["$","span",null,{"className":"text-pink-400","children":"2024/12/13 21:10:28"}]]}],["$","div","end_time",{"className":"mb-1 break-all","style":{"textIndent":"-1.2em","paddingLeft":"1.2em"},"children":[["$","span",null,{"className":"text-blue-400","children":["[","End Time","]"]}]," ",["$","span",null,{"className":"text-pink-400","children":"2024/12/14 02:10:28"}]]}],["$","div","link",{"className":"mb-1 break-all","style":{"textIndent":"-1.2em","paddingLeft":"1.2em"},"children":[["$","span",null,{"className":"text-blue-400","children":["[","Link","]"]}]," ",["$","a",null,{"href":"https://qoj.ac/contest/1041","target":"_blank","rel":"noopener noreferrer","className":"text-indigo-400 underline hover:text-indigo-200","children":"https://qoj.ac/contest/1041"}]]}],["$","div","difficulty",{"className":"mb-1 break-all","style":{"textIndent":"-1.2em","paddingLeft":"1.2em"},"children":[["$","span",null,{"className":"text-blue-400","children":["[","Difficulty","]"]}]," ",["$","span",null,{"className":"text-yellow-300","children":5}]]}]]}]]}]
1e:I[6005,["215","static/chunks/1951f239-e4c7a40f4938f7cd.js","81","static/chunks/81-d563b76c84969650.js","947","static/chunks/app/view/contests/%5Bcontest%5D/problems/%5Bproblem%5D/%5Bfile%5D/page-8b159e72c21ca0c8.js"],"default"]
1f:T1ac4,[link](https://qoj.ac/contest/1041)

你的细节很多，但是你的时限弥补了这一点。

考虑每 $C$ 个划分一个块，那么一个合法的最大子段和要么在块内，要么跨两个相邻的块。

第一类的维护是简单的。

第二类考虑前缀和，对于相邻的两段，一个合法的最大子段和需要满足 $l> r-C$，放在前缀和上就是 $l\geq r-C$。

在线段树上用半在线的方式就能维护这个东西，再用一棵线段树维护相邻整块的答案。

剩下的就是散块对相邻的整块。

可能有好处理的方法，我的方法比较笨：把其他的都赋值为负无穷，再在半在线线段树上询问。

复杂度是 $O(n\log n)$，常数很大。

```cpp
#pragma GCC optimize(2)
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef double dou;
typedef pair<int,int> pii;
#define fi first
#define se second
#define mapa make_pair
typedef long double ld;
typedef unsigned long long ull;
#define ep emplace_back
template <typename T>inline void read(T &x){
	x=0;char c=getchar();bool f=0;
	for(;c<'0'||c>'9';c=getchar()) f|=(c=='-');
	for(;c>='0'&&c<='9';c=getchar())
	x=(x<<1)+(x<<3)+(c^48);
	x=(f?-x:x);
}
const int N=4e5+5;
int n, m, c;
int a[N];
ll sum[N];
struct T1{
	struct info{
		ll ans, ls, rs, sum;
		void set(int x){
			sum=x;
			ans=max(0, x);
			ls=rs=ans;
		}
	}tr[N<<2];
	inline friend info operator +(info x, info y){
		info z;
		z.ans=max(x.ans, y.ans);
		z.sum=x.sum+y.sum;
		z.ls=max(x.ls, x.sum+y.ls);
		z.rs=max(y.rs, y.sum+x.rs);
		z.ans=max(z.ans, x.rs+y.ls);
		return z;
	}
	void build(int p, int l, int r){
		if(l==r){
			tr[p].set(a[l]);
			return ;
		}
		int mid=(l+r)>>1;
		build(p<<1, l, mid);
		build(p<<1|1, mid+1, r);
		tr[p]=tr[p<<1]+tr[p<<1|1];
	}
	void mdf(int p, int l, int r, int x, int v){
		if(l==r){
			tr[p].set(v);
			return ;
		}
		int mid=(l+r)>>1;
		if(x<=mid) mdf(p<<1, l, mid, x, v);
		else mdf(p<<1|1, mid+1, r, x, v);
		tr[p]=tr[p<<1]+tr[p<<1|1];
	}
	void get(int p, int l, int r, int L, int R, info &ret){
		if(L>R) return ;
		if(L<=l&&r<=R){
			ret=ret+tr[p];
			return ;
		}
		int mid=(l+r)>>1;
		if(L<=mid) get(p<<1, l, mid, L, R, ret);
		if(R>mid) get(p<<1|1, mid+1, r, L, R, ret);
	}
}t1;
struct T2{
	ll a[N<<2], b[N<<2], mx[N<<2], taga[N<<2], tagb[N<<2];
	void build(int p, int l, int r){
		if(l==r){
			a[p]=sum[l]; b[p]=sum[l+c];
			mx[p]=b[p]-a[p];
			return ;
		}
		int mid=(l+r)>>1;
		build(p<<1, l, mid); build(p<<1|1, mid+1, r);
		a[p]=min(a[p<<1], a[p<<1|1]);
		b[p]=max(b[p<<1], b[p<<1|1]);
		mx[p]=max(max(mx[p<<1], mx[p<<1|1]), b[p<<1]-a[p<<1|1]);
	}
	void down(int p){
		if(taga[p]!=0){
			taga[p<<1]+=taga[p];
			a[p<<1]+=taga[p];
			mx[p<<1]-=taga[p];
			taga[p<<1|1]+=taga[p];
			a[p<<1|1]+=taga[p];
			mx[p<<1|1]-=taga[p];
			taga[p]=0;
		}
		if(tagb[p]!=0){
			tagb[p<<1]+=tagb[p];
			b[p<<1]+=tagb[p];
			mx[p<<1]+=tagb[p];
			tagb[p<<1|1]+=tagb[p];
			b[p<<1|1]+=tagb[p];
			mx[p<<1|1]+=tagb[p];
			tagb[p]=0;
		}
	}
	void mdfa(int p, int l, int r, int L, int R, ll v){
		if(L>R) return ;
		if(L<=l&&r<=R){
			taga[p]+=v;
			a[p]+=v;
			mx[p]-=v;
			return ;
		}
		down(p);
		int mid=(l+r)>>1;
		if(L<=mid) mdfa(p<<1, l, mid, L, R, v);
		if(R>mid) mdfa(p<<1|1, mid+1, r, L, R, v);
		a[p]=min(a[p<<1], a[p<<1|1]);
		b[p]=max(b[p<<1], b[p<<1|1]);
		mx[p]=max(max(mx[p<<1], mx[p<<1|1]), b[p<<1]-a[p<<1|1]);
	}
	void mdfb(int p, int l, int r, int L, int R, ll v){
		if(L>R) return ;
		if(L<=l&&r<=R){
			tagb[p]+=v;
			b[p]+=v;
			mx[p]+=v;
			return ;
		}
		down(p);
		int mid=(l+r)>>1;
		if(L<=mid) mdfb(p<<1, l, mid, L, R, v);
		if(R>mid) mdfb(p<<1|1, mid+1, r, L, R, v);
		a[p]=min(a[p<<1], a[p<<1|1]);
		b[p]=max(b[p<<1], b[p<<1|1]);
		mx[p]=max(max(mx[p<<1], mx[p<<1|1]), b[p<<1]-a[p<<1|1]);
	}
	void qry(int p, int l, int r, int L, int R, ll &pa, ll &pb, ll &pans){
		if(L>R) return ;
		if(L<=l&&r<=R){
			pans=max(max(pans, mx[p]), pb-a[p]);
			pa=min(pa, a[p]);
			pb=max(pb, b[p]);
			return ;
		}
		int mid=(l+r)>>1;
		down(p);
		if(L<=mid) qry(p<<1, l, mid, L, R, pa, pb, pans);
		if(R>mid) qry(p<<1|1, mid+1, r, L, R, pa, pb, pans);
	}
}t2;
struct T3{
	ll mx[N<<2], mx2[N<<2];
	void build(int p, int l, int r){
		if(l==r){
			T1::info tem; tem.set(0);
			t1.get(1, 1, n, (l-1)*c+1, l*c, tem);
			mx2[p]=tem.ans;
			mx[p]=0;
			ll pa=1e18, pb=-1e18;
			t2.qry(1, 1, n-c, (l-1)*c+1, l*c, pa, pb, mx[p]);
			return ;
		}
		int mid=(l+r)>>1;
		build(p<<1, l, mid); build(p<<1|1, mid+1, r);
		mx[p]=max(mx[p<<1], mx[p<<1|1]);
		mx2[p]=max(mx2[p<<1], mx2[p<<1|1]);
	}
	void mdf(int p, int l, int r, int x){
		if(l==r){
			T1::info tem; tem.set(0);
			t1.get(1, 1, n, (l-1)*c+1, l*c, tem);
			mx2[p]=tem.ans;
			mx[p]=0;
			ll pa=1e18, pb=-1e18;
			t2.qry(1, 1, n-c, (l-1)*c+1, l*c, pa, pb, mx[p]);
			return ;
		}
		int mid=(l+r)>>1;
		if(x<=mid) mdf(p<<1, l, mid, x);
		else mdf(p<<1|1, mid+1, r, x);
		mx[p]=max(mx[p<<1], mx[p<<1|1]);
		mx2[p]=max(mx2[p<<1], mx2[p<<1|1]);
	}
	ll get(int p, int l, int r, int L, int R){
		if(L>R) return 0;
		if(L<=l&&r<=R) return max(mx[p], mx2[p]);
		int mid=(l+r)>>1; ll ret=0;
		if(L<=mid) ret=get(p<<1, l, mid, L, R);
		if(R>mid) ret=max(ret, get(p<<1|1, mid+1, r, L, R));
		return ret;
	}
}t3;
int main(){
	// freopen("D:\\nya\\acm\\A\\test.in","r",stdin);
	// freopen("D:\\nya\\acm\\A\\test.out","w",stdout);
	read(n); read(m); read(c);
	for(int i=1; i<=n; ++i) read(a[i]), sum[i]=sum[i-1]+a[i];
	if(n==c) a[++n]=-1e9, sum[n]=sum[n-1]+a[n];
	while(n%c) a[++n]=-1e9, sum[n]=sum[n-1]+a[n];
	t1.build(1, 1, n);
	t2.build(1, 1, n-c);
	t3.build(1, 1, n/c-1);
	int tp, x, y;
	while(m--){
		read(tp); read(x); read(y);
		if(tp==1){
			t1.mdf(1, 1, n, x, y);
			t2.mdfa(1, 1, n-c, x, n-c, y-a[x]);
			t2.mdfb(1, 1, n-c, max(1, x-c), n-c, y-a[x]);
			if((x-1)/c>=1) t3.mdf(1, 1, n/c-1, (x-1)/c);
			if((x-1)/c+1<=n/c-1) t3.mdf(1, 1, n/c-1, (x-1)/c+1);
			a[x]=y;
		}
		else{
			ll ans=0;
			ll pa=1e18, pb=-1e18;
			t2.mdfa(1, 1, n-c, 1, x-1, 1e16); t2.mdfa(1, 1, n-c, y+1, n-c, 1e16);
			t2.mdfb(1, 1, n-c, 1, x-c-1, -1e16); t2.mdfb(1, 1, n-c, max(1, y-c+1), n-c, -1e16);
			t2.qry(1, 1, n-c, x, min(n-c, x+c-1), pa, pb, ans);
			pa=1e18, pb=-1e18;
			t2.qry(1, 1, n-c, max(1, y-c*2+1), y-c, pa, pb, ans);
			t2.mdfa(1, 1, n-c, 1, x-1, -1e16); t2.mdfa(1, 1, n-c, y+1, n-c, -1e16);
			t2.mdfb(1, 1, n-c, 1, x-c-1, 1e16); t2.mdfb(1, 1, n-c, max(1, y-c+1), n-c, 1e16);
			T1::info tem; tem.set(0);
			t1.get(1, 1, n, x, min(y, x+c-1), tem);
			ans=max(ans, tem.ans);
			tem.set(0);
			t1.get(1, 1, n, max(x, y-c+1), y, tem);
			ans=max(ans, tem.ans);
			if((y-1)/c>(x-1)/c+1){
				// cout<<(x-1)/c+2<<' '<<(y-1)/c-1<<endl;
				ans=max(ans, t3.get(1, 1, n/c-1, (x-1)/c+2, (y-1)/c-1));
				tem.set(0);
				t1.get(1, 1, n, ((y-1)/c-1)*c+1, ((y-1)/c)*c, tem);
				ans=max(ans, tem.ans);
			}
			printf("%lld\n", ans);
		}
	}
	return 0;
}
```
20:T81dc,
<p><a href="https://qoj.ac/contest/1041">link</a></p>
<p>你的细节很多，但是你的时限弥补了这一点。</p>
<p>考虑每 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML">
        <semantics>
          <mrow>
            <mi>C</mi>
          </mrow>
          <annotation encoding="application/x-tex">C</annotation>
        </semantics>
      </math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span> 个划分一个块，那么一个合法的最大子段和要么在块内，要么跨两个相邻的块。</p>
<p>第一类的维护是简单的。</p>
<p>第二类考虑前缀和，对于相邻的两段，一个合法的最大子段和需要满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML">
        <semantics>
          <mrow>
            <mi>l</mi>
            <mo>></mo>
            <mi>r</mi>
            <mo>−</mo>
            <mi>C</mi>
          </mrow>
          <annotation encoding="application/x-tex">l> r-C</annotation>
        </semantics>
      </math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，放在前缀和上就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML">
        <semantics>
          <mrow>
            <mi>l</mi>
            <mo>≥</mo>
            <mi>r</mi>
            <mo>−</mo>
            <mi>C</mi>
          </mrow>
          <annotation encoding="application/x-tex">l\geq r-C</annotation>
        </semantics>
      </math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.136em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>。</p>
<p>在线段树上用半在线的方式就能维护这个东西，再用一棵线段树维护相邻整块的答案。</p>
<p>剩下的就是散块对相邻的整块。</p>
<p>可能有好处理的方法，我的方法比较笨：把其他的都赋值为负无穷，再在半在线线段树上询问。</p>
<p>复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML">
        <semantics>
          <mrow>
            <mi>O</mi>
            <mo stretchy="false">(</mo>
            <mi>n</mi>
            <mi>log</mi>
            <mo>⁡</mo>
            <mi>n</mi>
            <mo stretchy="false">)</mo>
          </mrow>
          <annotation encoding="application/x-tex">O(n\log n)</annotation>
        </semantics>
      </math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，常数很大。</p>
<pre><code class="hljs language-cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(2)</span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&#x3C;bits/stdc++.h></span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;
<span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;
<span class="hljs-keyword">typedef</span> <span class="hljs-type">double</span> dou;
<span class="hljs-keyword">typedef</span> pair&#x3C;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>> pii;
<span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span>
<span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span>
<span class="hljs-meta">#<span class="hljs-keyword">define</span> mapa make_pair</span>
<span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">double</span> ld;
<span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;
<span class="hljs-meta">#<span class="hljs-keyword">define</span> ep emplace_back</span>
<span class="hljs-keyword">template</span> &#x3C;<span class="hljs-keyword">typename</span> T><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &#x26;x)</span></span>{
	x=<span class="hljs-number">0</span>;<span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<span class="hljs-type">bool</span> f=<span class="hljs-number">0</span>;
	<span class="hljs-keyword">for</span>(;c&#x3C;<span class="hljs-string">'0'</span>||c><span class="hljs-string">'9'</span>;c=<span class="hljs-built_in">getchar</span>()) f|=(c==<span class="hljs-string">'-'</span>);
	<span class="hljs-keyword">for</span>(;c>=<span class="hljs-string">'0'</span>&#x26;&#x26;c&#x3C;=<span class="hljs-string">'9'</span>;c=<span class="hljs-built_in">getchar</span>())
	x=(x&#x3C;&#x3C;<span class="hljs-number">1</span>)+(x&#x3C;&#x3C;<span class="hljs-number">3</span>)+(c^<span class="hljs-number">48</span>);
	x=(f?-x:x);
}
<span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">4e5</span><span class="hljs-number">+5</span>;
<span class="hljs-type">int</span> n, m, c;
<span class="hljs-type">int</span> a[N];
ll sum[N];
<span class="hljs-keyword">struct</span> <span class="hljs-title class_">T1</span>{
	<span class="hljs-keyword">struct</span> <span class="hljs-title class_">info</span>{
		ll ans, ls, rs, sum;
		<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>{
			sum=x;
			ans=<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, x);
			ls=rs=ans;
		}
	}tr[N&#x3C;&#x3C;<span class="hljs-number">2</span>];
	<span class="hljs-keyword">inline</span> <span class="hljs-keyword">friend</span> info <span class="hljs-keyword">operator</span> +(info x, info y){
		info z;
		z.ans=<span class="hljs-built_in">max</span>(x.ans, y.ans);
		z.sum=x.sum+y.sum;
		z.ls=<span class="hljs-built_in">max</span>(x.ls, x.sum+y.ls);
		z.rs=<span class="hljs-built_in">max</span>(y.rs, y.sum+x.rs);
		z.ans=<span class="hljs-built_in">max</span>(z.ans, x.rs+y.ls);
		<span class="hljs-keyword">return</span> z;
	}
	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span>{
		<span class="hljs-keyword">if</span>(l==r){
			tr[p].<span class="hljs-built_in">set</span>(a[l]);
			<span class="hljs-keyword">return</span> ;
		}
		<span class="hljs-type">int</span> mid=(l+r)>><span class="hljs-number">1</span>;
		<span class="hljs-built_in">build</span>(p&#x3C;&#x3C;<span class="hljs-number">1</span>, l, mid);
		<span class="hljs-built_in">build</span>(p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>, mid<span class="hljs-number">+1</span>, r);
		tr[p]=tr[p&#x3C;&#x3C;<span class="hljs-number">1</span>]+tr[p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];
	}
	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mdf</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> v)</span></span>{
		<span class="hljs-keyword">if</span>(l==r){
			tr[p].<span class="hljs-built_in">set</span>(v);
			<span class="hljs-keyword">return</span> ;
		}
		<span class="hljs-type">int</span> mid=(l+r)>><span class="hljs-number">1</span>;
		<span class="hljs-keyword">if</span>(x&#x3C;=mid) <span class="hljs-built_in">mdf</span>(p&#x3C;&#x3C;<span class="hljs-number">1</span>, l, mid, x, v);
		<span class="hljs-keyword">else</span> <span class="hljs-built_in">mdf</span>(p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>, mid<span class="hljs-number">+1</span>, r, x, v);
		tr[p]=tr[p&#x3C;&#x3C;<span class="hljs-number">1</span>]+tr[p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];
	}
	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R, info &#x26;ret)</span></span>{
		<span class="hljs-keyword">if</span>(L>R) <span class="hljs-keyword">return</span> ;
		<span class="hljs-keyword">if</span>(L&#x3C;=l&#x26;&#x26;r&#x3C;=R){
			ret=ret+tr[p];
			<span class="hljs-keyword">return</span> ;
		}
		<span class="hljs-type">int</span> mid=(l+r)>><span class="hljs-number">1</span>;
		<span class="hljs-keyword">if</span>(L&#x3C;=mid) <span class="hljs-built_in">get</span>(p&#x3C;&#x3C;<span class="hljs-number">1</span>, l, mid, L, R, ret);
		<span class="hljs-keyword">if</span>(R>mid) <span class="hljs-built_in">get</span>(p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>, mid<span class="hljs-number">+1</span>, r, L, R, ret);
	}
}t1;
<span class="hljs-keyword">struct</span> <span class="hljs-title class_">T2</span>{
	ll a[N&#x3C;&#x3C;<span class="hljs-number">2</span>], b[N&#x3C;&#x3C;<span class="hljs-number">2</span>], mx[N&#x3C;&#x3C;<span class="hljs-number">2</span>], taga[N&#x3C;&#x3C;<span class="hljs-number">2</span>], tagb[N&#x3C;&#x3C;<span class="hljs-number">2</span>];
	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span>{
		<span class="hljs-keyword">if</span>(l==r){
			a[p]=sum[l]; b[p]=sum[l+c];
			mx[p]=b[p]-a[p];
			<span class="hljs-keyword">return</span> ;
		}
		<span class="hljs-type">int</span> mid=(l+r)>><span class="hljs-number">1</span>;
		<span class="hljs-built_in">build</span>(p&#x3C;&#x3C;<span class="hljs-number">1</span>, l, mid); <span class="hljs-built_in">build</span>(p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>, mid<span class="hljs-number">+1</span>, r);
		a[p]=<span class="hljs-built_in">min</span>(a[p&#x3C;&#x3C;<span class="hljs-number">1</span>], a[p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);
		b[p]=<span class="hljs-built_in">max</span>(b[p&#x3C;&#x3C;<span class="hljs-number">1</span>], b[p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);
		mx[p]=<span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>(mx[p&#x3C;&#x3C;<span class="hljs-number">1</span>], mx[p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]), b[p&#x3C;&#x3C;<span class="hljs-number">1</span>]-a[p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);
	}
	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span>{
		<span class="hljs-keyword">if</span>(taga[p]!=<span class="hljs-number">0</span>){
			taga[p&#x3C;&#x3C;<span class="hljs-number">1</span>]+=taga[p];
			a[p&#x3C;&#x3C;<span class="hljs-number">1</span>]+=taga[p];
			mx[p&#x3C;&#x3C;<span class="hljs-number">1</span>]-=taga[p];
			taga[p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]+=taga[p];
			a[p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]+=taga[p];
			mx[p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]-=taga[p];
			taga[p]=<span class="hljs-number">0</span>;
		}
		<span class="hljs-keyword">if</span>(tagb[p]!=<span class="hljs-number">0</span>){
			tagb[p&#x3C;&#x3C;<span class="hljs-number">1</span>]+=tagb[p];
			b[p&#x3C;&#x3C;<span class="hljs-number">1</span>]+=tagb[p];
			mx[p&#x3C;&#x3C;<span class="hljs-number">1</span>]+=tagb[p];
			tagb[p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]+=tagb[p];
			b[p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]+=tagb[p];
			mx[p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]+=tagb[p];
			tagb[p]=<span class="hljs-number">0</span>;
		}
	}
	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mdfa</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R, ll v)</span></span>{
		<span class="hljs-keyword">if</span>(L>R) <span class="hljs-keyword">return</span> ;
		<span class="hljs-keyword">if</span>(L&#x3C;=l&#x26;&#x26;r&#x3C;=R){
			taga[p]+=v;
			a[p]+=v;
			mx[p]-=v;
			<span class="hljs-keyword">return</span> ;
		}
		<span class="hljs-built_in">down</span>(p);
		<span class="hljs-type">int</span> mid=(l+r)>><span class="hljs-number">1</span>;
		<span class="hljs-keyword">if</span>(L&#x3C;=mid) <span class="hljs-built_in">mdfa</span>(p&#x3C;&#x3C;<span class="hljs-number">1</span>, l, mid, L, R, v);
		<span class="hljs-keyword">if</span>(R>mid) <span class="hljs-built_in">mdfa</span>(p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>, mid<span class="hljs-number">+1</span>, r, L, R, v);
		a[p]=<span class="hljs-built_in">min</span>(a[p&#x3C;&#x3C;<span class="hljs-number">1</span>], a[p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);
		b[p]=<span class="hljs-built_in">max</span>(b[p&#x3C;&#x3C;<span class="hljs-number">1</span>], b[p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);
		mx[p]=<span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>(mx[p&#x3C;&#x3C;<span class="hljs-number">1</span>], mx[p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]), b[p&#x3C;&#x3C;<span class="hljs-number">1</span>]-a[p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);
	}
	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mdfb</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R, ll v)</span></span>{
		<span class="hljs-keyword">if</span>(L>R) <span class="hljs-keyword">return</span> ;
		<span class="hljs-keyword">if</span>(L&#x3C;=l&#x26;&#x26;r&#x3C;=R){
			tagb[p]+=v;
			b[p]+=v;
			mx[p]+=v;
			<span class="hljs-keyword">return</span> ;
		}
		<span class="hljs-built_in">down</span>(p);
		<span class="hljs-type">int</span> mid=(l+r)>><span class="hljs-number">1</span>;
		<span class="hljs-keyword">if</span>(L&#x3C;=mid) <span class="hljs-built_in">mdfb</span>(p&#x3C;&#x3C;<span class="hljs-number">1</span>, l, mid, L, R, v);
		<span class="hljs-keyword">if</span>(R>mid) <span class="hljs-built_in">mdfb</span>(p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>, mid<span class="hljs-number">+1</span>, r, L, R, v);
		a[p]=<span class="hljs-built_in">min</span>(a[p&#x3C;&#x3C;<span class="hljs-number">1</span>], a[p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);
		b[p]=<span class="hljs-built_in">max</span>(b[p&#x3C;&#x3C;<span class="hljs-number">1</span>], b[p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);
		mx[p]=<span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>(mx[p&#x3C;&#x3C;<span class="hljs-number">1</span>], mx[p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]), b[p&#x3C;&#x3C;<span class="hljs-number">1</span>]-a[p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);
	}
	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">qry</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R, ll &#x26;pa, ll &#x26;pb, ll &#x26;pans)</span></span>{
		<span class="hljs-keyword">if</span>(L>R) <span class="hljs-keyword">return</span> ;
		<span class="hljs-keyword">if</span>(L&#x3C;=l&#x26;&#x26;r&#x3C;=R){
			pans=<span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>(pans, mx[p]), pb-a[p]);
			pa=<span class="hljs-built_in">min</span>(pa, a[p]);
			pb=<span class="hljs-built_in">max</span>(pb, b[p]);
			<span class="hljs-keyword">return</span> ;
		}
		<span class="hljs-type">int</span> mid=(l+r)>><span class="hljs-number">1</span>;
		<span class="hljs-built_in">down</span>(p);
		<span class="hljs-keyword">if</span>(L&#x3C;=mid) <span class="hljs-built_in">qry</span>(p&#x3C;&#x3C;<span class="hljs-number">1</span>, l, mid, L, R, pa, pb, pans);
		<span class="hljs-keyword">if</span>(R>mid) <span class="hljs-built_in">qry</span>(p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>, mid<span class="hljs-number">+1</span>, r, L, R, pa, pb, pans);
	}
}t2;
<span class="hljs-keyword">struct</span> <span class="hljs-title class_">T3</span>{
	ll mx[N&#x3C;&#x3C;<span class="hljs-number">2</span>], mx2[N&#x3C;&#x3C;<span class="hljs-number">2</span>];
	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span>{
		<span class="hljs-keyword">if</span>(l==r){
			T1::info tem; tem.<span class="hljs-built_in">set</span>(<span class="hljs-number">0</span>);
			t<span class="hljs-number">1.</span><span class="hljs-built_in">get</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, (l<span class="hljs-number">-1</span>)*c<span class="hljs-number">+1</span>, l*c, tem);
			mx2[p]=tem.ans;
			mx[p]=<span class="hljs-number">0</span>;
			ll pa=<span class="hljs-number">1e18</span>, pb=<span class="hljs-number">-1e18</span>;
			t<span class="hljs-number">2.</span><span class="hljs-built_in">qry</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n-c, (l<span class="hljs-number">-1</span>)*c<span class="hljs-number">+1</span>, l*c, pa, pb, mx[p]);
			<span class="hljs-keyword">return</span> ;
		}
		<span class="hljs-type">int</span> mid=(l+r)>><span class="hljs-number">1</span>;
		<span class="hljs-built_in">build</span>(p&#x3C;&#x3C;<span class="hljs-number">1</span>, l, mid); <span class="hljs-built_in">build</span>(p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>, mid<span class="hljs-number">+1</span>, r);
		mx[p]=<span class="hljs-built_in">max</span>(mx[p&#x3C;&#x3C;<span class="hljs-number">1</span>], mx[p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);
		mx2[p]=<span class="hljs-built_in">max</span>(mx2[p&#x3C;&#x3C;<span class="hljs-number">1</span>], mx2[p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);
	}
	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mdf</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x)</span></span>{
		<span class="hljs-keyword">if</span>(l==r){
			T1::info tem; tem.<span class="hljs-built_in">set</span>(<span class="hljs-number">0</span>);
			t<span class="hljs-number">1.</span><span class="hljs-built_in">get</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, (l<span class="hljs-number">-1</span>)*c<span class="hljs-number">+1</span>, l*c, tem);
			mx2[p]=tem.ans;
			mx[p]=<span class="hljs-number">0</span>;
			ll pa=<span class="hljs-number">1e18</span>, pb=<span class="hljs-number">-1e18</span>;
			t<span class="hljs-number">2.</span><span class="hljs-built_in">qry</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n-c, (l<span class="hljs-number">-1</span>)*c<span class="hljs-number">+1</span>, l*c, pa, pb, mx[p]);
			<span class="hljs-keyword">return</span> ;
		}
		<span class="hljs-type">int</span> mid=(l+r)>><span class="hljs-number">1</span>;
		<span class="hljs-keyword">if</span>(x&#x3C;=mid) <span class="hljs-built_in">mdf</span>(p&#x3C;&#x3C;<span class="hljs-number">1</span>, l, mid, x);
		<span class="hljs-keyword">else</span> <span class="hljs-built_in">mdf</span>(p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>, mid<span class="hljs-number">+1</span>, r, x);
		mx[p]=<span class="hljs-built_in">max</span>(mx[p&#x3C;&#x3C;<span class="hljs-number">1</span>], mx[p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);
		mx2[p]=<span class="hljs-built_in">max</span>(mx2[p&#x3C;&#x3C;<span class="hljs-number">1</span>], mx2[p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);
	}
	<span class="hljs-function">ll <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R)</span></span>{
		<span class="hljs-keyword">if</span>(L>R) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
		<span class="hljs-keyword">if</span>(L&#x3C;=l&#x26;&#x26;r&#x3C;=R) <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(mx[p], mx2[p]);
		<span class="hljs-type">int</span> mid=(l+r)>><span class="hljs-number">1</span>; ll ret=<span class="hljs-number">0</span>;
		<span class="hljs-keyword">if</span>(L&#x3C;=mid) ret=<span class="hljs-built_in">get</span>(p&#x3C;&#x3C;<span class="hljs-number">1</span>, l, mid, L, R);
		<span class="hljs-keyword">if</span>(R>mid) ret=<span class="hljs-built_in">max</span>(ret, <span class="hljs-built_in">get</span>(p&#x3C;&#x3C;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>, mid<span class="hljs-number">+1</span>, r, L, R));
		<span class="hljs-keyword">return</span> ret;
	}
}t3;
<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{
	<span class="hljs-comment">// freopen("D:\\nya\\acm\\A\\test.in","r",stdin);</span>
	<span class="hljs-comment">// freopen("D:\\nya\\acm\\A\\test.out","w",stdout);</span>
	<span class="hljs-built_in">read</span>(n); <span class="hljs-built_in">read</span>(m); <span class="hljs-built_in">read</span>(c);
	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&#x3C;=n; ++i) <span class="hljs-built_in">read</span>(a[i]), sum[i]=sum[i<span class="hljs-number">-1</span>]+a[i];
	<span class="hljs-keyword">if</span>(n==c) a[++n]=<span class="hljs-number">-1e9</span>, sum[n]=sum[n<span class="hljs-number">-1</span>]+a[n];
	<span class="hljs-keyword">while</span>(n%c) a[++n]=<span class="hljs-number">-1e9</span>, sum[n]=sum[n<span class="hljs-number">-1</span>]+a[n];
	t<span class="hljs-number">1.</span><span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);
	t<span class="hljs-number">2.</span><span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n-c);
	t<span class="hljs-number">3.</span><span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n/c<span class="hljs-number">-1</span>);
	<span class="hljs-type">int</span> tp, x, y;
	<span class="hljs-keyword">while</span>(m--){
		<span class="hljs-built_in">read</span>(tp); <span class="hljs-built_in">read</span>(x); <span class="hljs-built_in">read</span>(y);
		<span class="hljs-keyword">if</span>(tp==<span class="hljs-number">1</span>){
			t<span class="hljs-number">1.</span><span class="hljs-built_in">mdf</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, x, y);
			t<span class="hljs-number">2.</span><span class="hljs-built_in">mdfa</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n-c, x, n-c, y-a[x]);
			t<span class="hljs-number">2.</span><span class="hljs-built_in">mdfb</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n-c, <span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, x-c), n-c, y-a[x]);
			<span class="hljs-keyword">if</span>((x<span class="hljs-number">-1</span>)/c>=<span class="hljs-number">1</span>) t<span class="hljs-number">3.</span><span class="hljs-built_in">mdf</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n/c<span class="hljs-number">-1</span>, (x<span class="hljs-number">-1</span>)/c);
			<span class="hljs-keyword">if</span>((x<span class="hljs-number">-1</span>)/c<span class="hljs-number">+1</span>&#x3C;=n/c<span class="hljs-number">-1</span>) t<span class="hljs-number">3.</span><span class="hljs-built_in">mdf</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n/c<span class="hljs-number">-1</span>, (x<span class="hljs-number">-1</span>)/c<span class="hljs-number">+1</span>);
			a[x]=y;
		}
		<span class="hljs-keyword">else</span>{
			ll ans=<span class="hljs-number">0</span>;
			ll pa=<span class="hljs-number">1e18</span>, pb=<span class="hljs-number">-1e18</span>;
			t<span class="hljs-number">2.</span><span class="hljs-built_in">mdfa</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n-c, <span class="hljs-number">1</span>, x<span class="hljs-number">-1</span>, <span class="hljs-number">1e16</span>); t<span class="hljs-number">2.</span><span class="hljs-built_in">mdfa</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n-c, y<span class="hljs-number">+1</span>, n-c, <span class="hljs-number">1e16</span>);
			t<span class="hljs-number">2.</span><span class="hljs-built_in">mdfb</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n-c, <span class="hljs-number">1</span>, x-c<span class="hljs-number">-1</span>, <span class="hljs-number">-1e16</span>); t<span class="hljs-number">2.</span><span class="hljs-built_in">mdfb</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n-c, <span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, y-c<span class="hljs-number">+1</span>), n-c, <span class="hljs-number">-1e16</span>);
			t<span class="hljs-number">2.</span><span class="hljs-built_in">qry</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n-c, x, <span class="hljs-built_in">min</span>(n-c, x+c<span class="hljs-number">-1</span>), pa, pb, ans);
			pa=<span class="hljs-number">1e18</span>, pb=<span class="hljs-number">-1e18</span>;
			t<span class="hljs-number">2.</span><span class="hljs-built_in">qry</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n-c, <span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, y-c*<span class="hljs-number">2</span><span class="hljs-number">+1</span>), y-c, pa, pb, ans);
			t<span class="hljs-number">2.</span><span class="hljs-built_in">mdfa</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n-c, <span class="hljs-number">1</span>, x<span class="hljs-number">-1</span>, <span class="hljs-number">-1e16</span>); t<span class="hljs-number">2.</span><span class="hljs-built_in">mdfa</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n-c, y<span class="hljs-number">+1</span>, n-c, <span class="hljs-number">-1e16</span>);
			t<span class="hljs-number">2.</span><span class="hljs-built_in">mdfb</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n-c, <span class="hljs-number">1</span>, x-c<span class="hljs-number">-1</span>, <span class="hljs-number">1e16</span>); t<span class="hljs-number">2.</span><span class="hljs-built_in">mdfb</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n-c, <span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, y-c<span class="hljs-number">+1</span>), n-c, <span class="hljs-number">1e16</span>);
			T1::info tem; tem.<span class="hljs-built_in">set</span>(<span class="hljs-number">0</span>);
			t<span class="hljs-number">1.</span><span class="hljs-built_in">get</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, x, <span class="hljs-built_in">min</span>(y, x+c<span class="hljs-number">-1</span>), tem);
			ans=<span class="hljs-built_in">max</span>(ans, tem.ans);
			tem.<span class="hljs-built_in">set</span>(<span class="hljs-number">0</span>);
			t<span class="hljs-number">1.</span><span class="hljs-built_in">get</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, <span class="hljs-built_in">max</span>(x, y-c<span class="hljs-number">+1</span>), y, tem);
			ans=<span class="hljs-built_in">max</span>(ans, tem.ans);
			<span class="hljs-keyword">if</span>((y<span class="hljs-number">-1</span>)/c>(x<span class="hljs-number">-1</span>)/c<span class="hljs-number">+1</span>){
				<span class="hljs-comment">// cout&#x3C;&#x3C;(x-1)/c+2&#x3C;&#x3C;' '&#x3C;&#x3C;(y-1)/c-1&#x3C;&#x3C;endl;</span>
				ans=<span class="hljs-built_in">max</span>(ans, t<span class="hljs-number">3.</span><span class="hljs-built_in">get</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n/c<span class="hljs-number">-1</span>, (x<span class="hljs-number">-1</span>)/c<span class="hljs-number">+2</span>, (y<span class="hljs-number">-1</span>)/c<span class="hljs-number">-1</span>));
				tem.<span class="hljs-built_in">set</span>(<span class="hljs-number">0</span>);
				t<span class="hljs-number">1.</span><span class="hljs-built_in">get</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, ((y<span class="hljs-number">-1</span>)/c<span class="hljs-number">-1</span>)*c<span class="hljs-number">+1</span>, ((y<span class="hljs-number">-1</span>)/c)*c, tem);
				ans=<span class="hljs-built_in">max</span>(ans, tem.ans);
			}
			<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>, ans);
		}
	}
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}
</code></pre>
16:["$","$L1e",null,{"raw":"$1f","htmlContent":"$20"}]
12:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
e:null
10:{"metadata":[],"error":null,"digest":"$undefined"}
15:"$10:metadata"
